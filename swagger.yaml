openapi: 3.0.0
info:
  title: Your API
  version: 1.0.0
paths:
  /:
    get:
      summary: Check aliveness of service
      description: Check if the service is alive by returning a "hello spring" message.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: "hello spring"

  /api/validate/json:
    post:
      summary: Validate invoice as JSON
      description: Validate invoice, showing errors as a JSON file.
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: string
            examples:
              validXML:
                value: |
                  <!-- Your valid XML content goes here -->
              invalidXML:
                value: |
                  <InvalidXML>Not conforming to the schema</InvalidXML>
      responses:
        '200':
          description: Successful validation
          content:
            application/json:
              examples:
                example1:
                  value:
                    successful: true
                    firedAssertionErrors:
                      AUNZ_PEPPOL_1_1_10: []
                      AUNZ-UBL_1_1_10: []
        '201':
          description: Validation failure - XML not well formed
          content:
            application/json:
              examples:
                example2:
                  value:
                    successful: false
                    reason: 'XML is not well formed'
                    details: '<output from document parser>'
        '202':
          description: Validation failure - XML doesnâ€™t follow XSD schema or business rules
          content:
            application/json:
              examples:
                example3:
                  value:
                    successful: false
                    reason: 'XML failed schema validation or business rule validation'
                    details: '<output from XSD validator or business rule validator>'
        '401':
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              example:
                error: "Invalid or expired token"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: "Internal server error. (Could occur when a user enters null in either field)"

  /api/validate/html:
    post:
      summary: Validate invoice as HTML
      description: Validate invoice, showing errors as an HTML file.
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: string
      responses:
        '200':
          description: Successful validation
          content:
            text/html:
              examples:
                example1:
                  externalValue: "https://example.com/sample.html"
        '401':
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              example:
                error: "Invalid or expired token"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: "Internal server error. (Could occur when a user enters null in either field)"

  /api/validate/pdf:
    post:
      summary: Validate invoice as PDF
      description: Validate invoice, showing errors as a PDF file.
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: string
      responses:
        '200':
          description: Successful validation
          content:
            application/pdf:
              schema:
                type: string
              example: "<PDF content>"
        '401':
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              example:
                error: "Invalid or expired token"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: "Internal server error. (Could occur when a user enters null in either field)"

  /auth/register:
    post:
      summary: Register a user in the database
      description: Registers a user in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
            example:
              username: "user_name"
              password: "really_secure_password"
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                token: "user_token"
        '409':
          description: Conflict - Username already exists
          content:
            application/json:
              example:
                error: "Username already exists"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: "Internal server error. (Could occur when a user enters null in either field)"

  /auth/login:
    post:
      summary: Log a user in if user is already registered within the database
      description: Logs a user in if user is already registered within the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
            example:
              username: "user_name"
              password: "really_secure_password"
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                token: "user_token"
        '401':
          description: Unauthorized - Invalid username or password
          content:
            application/json:
              example:
                error: "Invalid username or password"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: "Internal server error. (Could occur when a user enters null in either field)"

  /auth/logout:
    delete:
      summary: Log a user out of the service by invalidating their token
      description: Log a user out of the service by invalidating their token.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: "Bearer user_token"
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                message: "Logout successful"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: "Internal server error. (Could occur under special circumstances)"


components:
  schemas:
    Invoice:
      type: object
      properties:
        CustomizationID:
          type: string
        ProfileID:
          type: string
        ID:
          type: string
        IssueDate:
          type: string
          format: date
        DueDate:
          type: string
          format: date
        InvoiceTypeCode:
          type: string
        Note:
          type: string
        DocumentCurrencyCode:
          type: string
        AccountingCost:
          type: string
        BuyerReference:
          type: string
        InvoicePeriod:
          $ref: '#/components/schemas/InvoicePeriod'
        OrderReference:
          $ref: '#/components/schemas/OrderReference'
        BillingReference:
          $ref: '#/components/schemas/BillingReference'
        DespatchDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        ReceiptDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        OriginatorDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        ContractDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        AccountingSupplierParty:
          $ref: '#/components/schemas/Party'
        AccountingCustomerParty:
          $ref: '#/components/schemas/Party'
        PayeeParty:
          $ref: '#/components/schemas/Party'
        TaxRepresentativeParty:
          $ref: '#/components/schemas/Party'
        Delivery:
          $ref: '#/components/schemas/Delivery'
        PaymentMeans:
          $ref: '#/components/schemas/PaymentMeans'
        PaymentTerms:
          $ref: '#/components/schemas/PaymentTerms'
        AllowanceCharge:
          $ref: '#/components/schemas/AllowanceCharge'
        TaxTotal:
          $ref: '#/components/schemas/TaxTotal'
        LegalMonetaryTotal:
          $ref: '#/components/schemas/LegalMonetaryTotal'
        InvoiceLine:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLine'

    InvoicePeriod:
      type: object
      properties:
        StartDate:
          type: string
          format: date
        EndDate:
          type: string
          format: date

    OrderReference:
      type: object
      properties:
        ID:
          type: string
        SalesOrderID:
          type: string

    BillingReference:
      type: object
      properties:
        InvoiceDocumentReference:
          $ref: '#/components/schemas/DocumentReference'

    DocumentReference:
      type: object
      properties:
        ID:
          type: string
        IssueDate:
          type: string
          format: date

    Party:
      type: object
      properties:
        EndpointID:
          type: string
        PartyIdentification:
          $ref: '#/components/schemas/PartyIdentification'
        PartyName:
          $ref: '#/components/schemas/PartyName'
        PostalAddress:
          $ref: '#/components/schemas/PostalAddress'
        PartyTaxScheme:
          $ref: '#/components/schemas/PartyTaxScheme'
        PartyLegalEntity:
          $ref: '#/components/schemas/PartyLegalEntity'
        Contact:
          $ref: '#/components/schemas/Contact'

    PartyIdentification:
      type: object
      properties:
        ID:
          type: string

    PartyName:
      type: object
      properties:
        Name:
          type: string

    PostalAddress:
      type: object
      properties:
        StreetName:
          type: string
        AdditionalStreetName:
          type: string
        CityName:
          type: string
        PostalZone:
          type: string
        Country:
          $ref: '#/components/schemas/Country'

    Country:
      type: object
      properties:
        IdentificationCode:
          type: string

    PartyTaxScheme:
      type: object
      properties:
        CompanyID:
          type: string
        TaxScheme:
          $ref: '#/components/schemas/TaxScheme'

    TaxScheme:
      type: object
      properties:
        ID:
          type: string

    PartyLegalEntity:
      type: object
      properties:
        RegistrationName:
          type: string
        CompanyID:
          type: string
        CompanyLegalForm:
          type: string

    Contact:
      type: object
      properties:
        Name:
          type: string
        Telephone:
          type: string
        ElectronicMail:
          type: string

    Delivery:
      type: object
      properties:
        ActualDeliveryDate:
          type: string
          format: date
        DeliveryLocation:
          $ref: '#/components/schemas/DeliveryLocation'
        DeliveryParty:
          $ref: '#/components/schemas/Party'

    DeliveryLocation:
      type: object
      properties:
        ID:
          type: string
        Address:
          $ref: '#/components/schemas/PostalAddress'

    PaymentMeans:
      type: object
      properties:
        PaymentMeansCode:
          type: object
          properties:
            name:
              type: string
          example: "Credit transfer"
        PaymentID:
          type: string
        PayeeFinancialAccount:
          $ref: '#/components/schemas/PayeeFinancialAccount'

    PayeeFinancialAccount:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        FinancialInstitutionBranch:
          $ref: '#/components/schemas/FinancialInstitutionBranch'

    FinancialInstitutionBranch:
      type: object
      properties:
        ID:
          type: string

    PaymentTerms:
      type: object
      properties:
        Note:
          type: string

    AllowanceCharge:
      type: object
      properties:
        ChargeIndicator:
          type: boolean
        AllowanceChargeReasonCode:
          type: string
        AllowanceChargeReason:
          type: string
        MultiplierFactorNumeric:
          type: number
        Amount:
          type: number
        BaseAmount:
          type: number
        TaxCategory:
          $ref: '#/components/schemas/TaxCategory'

    TaxCategory:
      type: object
      properties:
        ID:
          type: string
        Percent:
          type: number
        TaxScheme:
          $ref: '#/components/schemas/TaxScheme'

    TaxTotal:
      type: object
      properties:
        TaxAmount:
          type: number
        TaxSubtotal:
          $ref: '#/components/schemas/TaxSubtotal'

    TaxSubtotal:
      type: object
      properties:
        TaxableAmount:
          type: number
        TaxAmount:
          type: number
        TaxCategory:
          $ref: '#/components/schemas/TaxCategory'

    LegalMonetaryTotal:
      type: object
      properties:
        LineExtensionAmount:
          type: number
        TaxExclusiveAmount:
          type: number
        TaxInclusiveAmount:
          type: number
        ChargeTotalAmount:
          type: number
        PrepaidAmount:
          type: number
        PayableAmount:
          type: number

    InvoiceLine:
      type: object
      properties:
        ID:
          type: string
        Note:
          type: string
        InvoicedQuantity:
          $ref: '#/components/schemas/InvoicedQuantity'
        LineExtensionAmount:
          type: number
        AccountingCost:
          type: string
        InvoicePeriod:
          $ref: '#/components/schemas/InvoicePeriod'
        OrderLineReference:
          $ref: '#/components/schemas/OrderLineReference'
        DocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        Item:
          $ref: '#/components/schemas/Item'
        Price:
          $ref: '#/components/schemas/Price'

    InvoicedQuantity:
      type: object
      properties:
        unitCode:
          type: string
        value:
          type: number

    OrderLineReference:
      type: object
      properties:
        LineID:
          type: string

    Item:
      type: object
      properties:
        Description:
          type: string
        Name:
          type: string
        BuyersItemIdentification:
          $ref: '#/components/schemas/BuyersItemIdentification'
        SellersItemIdentification:
          $ref: '#/components/schemas/SellersItemIdentification'
        StandardItemIdentification:
          $ref: '#/components/schemas/StandardItemIdentification'
        OriginCountry:
          $ref: '#/components/schemas/Country'
        CommodityClassification:
          $ref: '#/components/schemas/CommodityClassification'
        ClassifiedTaxCategory:
          $ref: '#/components/schemas/ClassifiedTaxCategory'

    BuyersItemIdentification:
      type: object
      properties:
        ID:
          type: string

    SellersItemIdentification:
      type: object
      properties:
        ID:
          type: string

    StandardItemIdentification:
      type: object
      properties:
        ID:
          type: string
        schemeID:
          type: string

    CommodityClassification:
      type: object
      properties:
        ItemClassificationCode:
          $ref: '#/components/schemas/ItemClassificationCode'

    ItemClassificationCode:
      type: object
      properties:
        listID:
          type: string
        value:
          type: string

    ClassifiedTaxCategory:
      type: object
      properties:
        ID:
          type: string
        Percent:
          type: number
        TaxScheme:
          $ref: '#/components/schemas/TaxScheme'

    Price:
      type: object
      properties:
        PriceAmount:
          type: number
        AllowanceCharge:
          $ref: '#/components/schemas/AllowanceCharge'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Z5450330/API-validation/1.0.0