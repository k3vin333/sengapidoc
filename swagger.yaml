---
openapi: 3.0.0
info:
  title: 3000% RETURNS INVOICE VALIDATION 
  version: 1.0.0
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/K3VINALT/new/1.0.0
- url: https://virtserver.swaggerhub.com/Z5450330/API-validation/1.0.0
  description: SwaggerHub API Auto Mocking
paths:
  /:
    get:
      summary: Check aliveness of service
      description: Check if the service is alive
      responses:
        "200":
          description: Success
          content:
            text/plain:
              example: hello spring
  /api/validate/json:
    post:
      summary: Validate invoice as JSON
      description: Validate invoice and return errors as JSON
      parameters:
      - name: Content-Type
        in: header
        description: The content type of the request
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/xml
      - name: Authorization
        in: header
        description: The user's authentication token
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: user_token
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Invoice'
            examples:
              validXML:
                value: |
                  <!-- Your valid XML content goes here -->
        required: true
      responses:
        "200":
          description: Successful validation
          content:
            application/json:
              example:
                successful: true
                firedAssertionErrors:
                  AUNZ_PEPPOL_1_1_10: []
                  AUNZ-UBL_1_1_10: []
        "201":
          description: Validation failure - XML not well-formed
          content:
            application/json:
              example:
                successful: false
                reason: XML is not well formed
                details: <output from document parser>
        "202":
          description: Validation failure - XML doesnâ€™t follow XSD schema
          content:
            application/json:
              example:
                successful: false
                reason: XML failed schema validation
                details: <output from XSD validator>
        "401":
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              example:
                error: Invalid or expired token
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Internal server error. (Should not happen, but just in case it does)"
  /api/validate/html:
    post:
      summary: "Validate invoice, showing errors as HTML"
      description: Validate invoice and return errors as HTML
      parameters:
      - name: Content-Type
        in: header
        description: The content type of the request
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/xml
      - name: Authorization
        in: header
        description: The user's authentication token
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: user_token
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Invoice'
            examples:
              validXML:
                value: |
                  <!-- Your valid XML content goes here -->
        required: true
      responses:
        "200":
          description: Successful validation
          content:
            text/html:
              example:
                htmlFile: HTML representation of the validation report
        "401":
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              example:
                error: Invalid or expired token
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Internal server error. (Should not happen, but just in case it does)"
  /api/validate/pdf:
    post:
      summary: "Validate invoice, showing errors as a PDF"
      description: Validate invoice and return errors as a PDF
      parameters:
      - name: Content-Type
        in: header
        description: The content type of the request
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/xml
      - name: Authorization
        in: header
        description: The user's authentication token
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: user_token
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Invoice'
            examples:
              validXML:
                value: |
                  <!-- Your valid XML content goes here -->
        required: true
      responses:
        "200":
          description: Successful validation
          content:
            application/pdf:
              example:
                pdfFile: Binary representation of the PDF file
        "401":
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              example:
                error: Invalid or expired token
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Internal server error. (Should not happen, but just in case it does)"
  /auth/register:
    post:
      summary: Registers a user in the database
      description: Register a new user with a username and password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_register_body'
            examples:
              userRegistration:
                value: |
                  {
                    "username": "user_name",
                    "password": "really_secure_password"
                  }
        required: true
      responses:
        "200":
          description: Successful registration
          content:
            application/json:
              example:
                token: user_token
        "409":
          description: Conflict - Username already exists
          content:
            application/json:
              example:
                message: Username already exists
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Internal server error. (Should not happen, but just in case it does)"
  /auth/login:
    post:
      summary: Logs a user in if the user is already registered within the database
      description: Log in with a username and password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_login_body'
            examples:
              userLogin:
                value: |
                  {
                    "username": "user_name",
                    "password": "really_secure_password"
                  }
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              example:
                token: user_token
        "401":
          description: Unauthorized - Invalid username or password
          content:
            application/json:
              example:
                message: Invalid username or password
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Internal server error. (Should not happen, but just in case it does)"
  /auth/logout:
    delete:
      summary: Logs a user out of the service by invalidating their token
      description: Logs a user out by invalidating their token
      parameters:
      - name: Authorization
        in: header
        description: The user's authentication token
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: user_token
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              example:
                message: Logout successful
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Internal server error. (Should not happen, but just in case it does)"




  /logs/get/v2:
    get:
      summary: Get logs between specified dates
      description: Retrieve logs based on the specified start and end dates
      parameters:
      - name: adminKey
        in: header
        description: Only the admins and developer team of this API should be able to access the routes
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: adminKey
      - name: startDateStr
        in: query
        description: Start date and time in the format yyyy-MM-ddTHH:mm in AUSTRALIAN time
        required: true
        schema:
          type: string
      - name: endDateStr
        in: query
        description: End date and time in the format yyyy-MM-ddTHH:mm in AUSTRALIAN time
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Logs retrieved successfully
          content:
            application/json:
              example:
                [
                  {
                      "id": "unique ID",
                      "requestMethod": "POST",
                      "requestUrl": "/auth/login",
                      "requestTimestamp": " yyyy-MM-ddTHH:mm"
                  },
                  {
                      "id": "unique ID",
                      "requestMethod": "POST",
                      "requestUrl": "/auth/login",
                      "requestTimestamp":  yyyy-MM-ddTHH:mm "
                  }
                ]
        "401":
          description: Unauthorized - Admin key not provided or invalid
          content:
            application/json:
              example:
                error: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Internal server error. (Should not happen, but just in case it does)"
                
                
  /auth/change-password/v2:
    put:
      summary: Change user password
      description: Change the password of the authenticated user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
            examples:
              changePassword:
                value:
                  oldPassword: "old_secure_password"
                  newPassword: "new_secure_password"
        required: true
      parameters:
        - name: Authorization
          in: header
          description: The user's authentication token
          required: true
          style: simple
          explode: false
          schema:
            type: string
            default: user_token
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              example:
                message: Password changed successfully
        "401":
          description: Unauthorized - Invalid or expired token
          content:
            application/json:
              example:
                error: Invalid or expired token
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Internal server error. (Should not happen, but just in case it does)"

components:
  schemas:
    Invoice:
      type: object
      properties:
        CustomizationID:
          type: string
        ProfileID:
          type: string
        ID:
          type: string
        IssueDate:
          type: string
          format: date
        DueDate:
          type: string
          format: date
        InvoiceTypeCode:
          type: string
        Note:
          type: string
        DocumentCurrencyCode:
          type: string
        AccountingCost:
          type: string
        BuyerReference:
          type: string
        InvoicePeriod:
          $ref: '#/components/schemas/InvoicePeriod'
        OrderReference:
          $ref: '#/components/schemas/OrderReference'
        BillingReference:
          $ref: '#/components/schemas/BillingReference'
        DespatchDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        ReceiptDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        OriginatorDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        ContractDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        AccountingSupplierParty:
          $ref: '#/components/schemas/Party'
        AccountingCustomerParty:
          $ref: '#/components/schemas/Party'
        PayeeParty:
          $ref: '#/components/schemas/Party'
        TaxRepresentativeParty:
          $ref: '#/components/schemas/Party'
        Delivery:
          $ref: '#/components/schemas/Delivery'
        PaymentMeans:
          $ref: '#/components/schemas/PaymentMeans'
        PaymentTerms:
          $ref: '#/components/schemas/PaymentTerms'
        AllowanceCharge:
          $ref: '#/components/schemas/AllowanceCharge'
        TaxTotal:
          $ref: '#/components/schemas/TaxTotal'
        LegalMonetaryTotal:
          $ref: '#/components/schemas/LegalMonetaryTotal'
        InvoiceLine:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLine'
    InvoicePeriod:
      type: object
      properties:
        StartDate:
          type: string
          format: date
        EndDate:
          type: string
          format: date
    OrderReference:
      type: object
      properties:
        ID:
          type: string
        SalesOrderID:
          type: string
    BillingReference:
      type: object
      properties:
        InvoiceDocumentReference:
          $ref: '#/components/schemas/DocumentReference'
    DocumentReference:
      type: object
      properties:
        ID:
          type: string
        IssueDate:
          type: string
          format: date
    Party:
      type: object
      properties:
        EndpointID:
          type: string
        PartyIdentification:
          $ref: '#/components/schemas/PartyIdentification'
        PartyName:
          $ref: '#/components/schemas/PartyName'
        PostalAddress:
          $ref: '#/components/schemas/PostalAddress'
        PartyTaxScheme:
          $ref: '#/components/schemas/PartyTaxScheme'
        PartyLegalEntity:
          $ref: '#/components/schemas/PartyLegalEntity'
        Contact:
          $ref: '#/components/schemas/Contact'
    PartyIdentification:
      type: object
      properties:
        ID:
          type: string
    PartyName:
      type: object
      properties:
        Name:
          type: string
    PostalAddress:
      type: object
      properties:
        StreetName:
          type: string
        AdditionalStreetName:
          type: string
        CityName:
          type: string
        PostalZone:
          type: string
        Country:
          $ref: '#/components/schemas/Country'
    Country:
      type: object
      properties:
        IdentificationCode:
          type: string
    PartyTaxScheme:
      type: object
      properties:
        CompanyID:
          type: string
        TaxScheme:
          $ref: '#/components/schemas/TaxScheme'
    TaxScheme:
      type: object
      properties:
        ID:
          type: string
    PartyLegalEntity:
      type: object
      properties:
        RegistrationName:
          type: string
        CompanyID:
          type: string
        CompanyLegalForm:
          type: string
    Contact:
      type: object
      properties:
        Name:
          type: string
        Telephone:
          type: string
        ElectronicMail:
          type: string
    Delivery:
      type: object
      properties:
        ActualDeliveryDate:
          type: string
          format: date
        DeliveryLocation:
          $ref: '#/components/schemas/DeliveryLocation'
        DeliveryParty:
          $ref: '#/components/schemas/Party'
    DeliveryLocation:
      type: object
      properties:
        ID:
          type: string
        Address:
          $ref: '#/components/schemas/PostalAddress'
    PaymentMeans:
      type: object
      properties:
        PaymentMeansCode:
          $ref: '#/components/schemas/PaymentMeans_PaymentMeansCode'
        PaymentID:
          type: string
        PayeeFinancialAccount:
          $ref: '#/components/schemas/PayeeFinancialAccount'
    PayeeFinancialAccount:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        FinancialInstitutionBranch:
          $ref: '#/components/schemas/FinancialInstitutionBranch'
    FinancialInstitutionBranch:
      type: object
      properties:
        ID:
          type: string
    PaymentTerms:
      type: object
      properties:
        Note:
          type: string
    AllowanceCharge:
      type: object
      properties:
        ChargeIndicator:
          type: boolean
        AllowanceChargeReasonCode:
          type: string
        AllowanceChargeReason:
          type: string
        MultiplierFactorNumeric:
          type: number
        Amount:
          type: number
        BaseAmount:
          type: number
        TaxCategory:
          $ref: '#/components/schemas/TaxCategory'
    TaxCategory:
      type: object
      properties:
        ID:
          type: string
        Percent:
          type: number
        TaxScheme:
          $ref: '#/components/schemas/TaxScheme'
    TaxTotal:
      type: object
      properties:
        TaxAmount:
          type: number
        TaxSubtotal:
          $ref: '#/components/schemas/TaxSubtotal'
    TaxSubtotal:
      type: object
      properties:
        TaxableAmount:
          type: number
        TaxAmount:
          type: number
        TaxCategory:
          $ref: '#/components/schemas/TaxCategory'
    LegalMonetaryTotal:
      type: object
      properties:
        LineExtensionAmount:
          type: number
        TaxExclusiveAmount:
          type: number
        TaxInclusiveAmount:
          type: number
        ChargeTotalAmount:
          type: number
        PrepaidAmount:
          type: number
        PayableAmount:
          type: number
    InvoiceLine:
      type: object
      properties:
        ID:
          type: string
        Note:
          type: string
        InvoicedQuantity:
          $ref: '#/components/schemas/InvoicedQuantity'
        LineExtensionAmount:
          type: number
        AccountingCost:
          type: string
        InvoicePeriod:
          $ref: '#/components/schemas/InvoicePeriod'
        OrderLineReference:
          $ref: '#/components/schemas/OrderLineReference'
        DocumentReference:
          $ref: '#/components/schemas/DocumentReference'
        Item:
          $ref: '#/components/schemas/Item'
        Price:
          $ref: '#/components/schemas/Price'
    InvoicedQuantity:
      type: object
      properties:
        unitCode:
          type: string
        value:
          type: number
    OrderLineReference:
      type: object
      properties:
        LineID:
          type: string
    Item:
      type: object
      properties:
        Description:
          type: string
        Name:
          type: string
        BuyersItemIdentification:
          $ref: '#/components/schemas/BuyersItemIdentification'
        SellersItemIdentification:
          $ref: '#/components/schemas/SellersItemIdentification'
        StandardItemIdentification:
          $ref: '#/components/schemas/StandardItemIdentification'
        OriginCountry:
          $ref: '#/components/schemas/Country'
        CommodityClassification:
          $ref: '#/components/schemas/CommodityClassification'
        ClassifiedTaxCategory:
          $ref: '#/components/schemas/ClassifiedTaxCategory'
    BuyersItemIdentification:
      type: object
      properties:
        ID:
          type: string
    SellersItemIdentification:
      type: object
      properties:
        ID:
          type: string
    StandardItemIdentification:
      type: object
      properties:
        ID:
          type: string
        schemeID:
          type: string
    CommodityClassification:
      type: object
      properties:
        ItemClassificationCode:
          $ref: '#/components/schemas/ItemClassificationCode'
    ItemClassificationCode:
      type: object
      properties:
        listID:
          type: string
        value:
          type: string
    ClassifiedTaxCategory:
      type: object
      properties:
        ID:
          type: string
        Percent:
          type: number
        TaxScheme:
          $ref: '#/components/schemas/TaxScheme'
    Price:
      type: object
      properties:
        PriceAmount:
          type: number
        AllowanceCharge:
          $ref: '#/components/schemas/AllowanceCharge'
    auth_register_body:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    auth_login_body:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PaymentMeans_PaymentMeansCode:
      type: object
      properties:
        name:
          type: string
      example: Credit transfer